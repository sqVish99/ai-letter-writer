{"ast":null,"code":"import React,{useState}from\"react\";import openaiservice from\"./services/openaiservice\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const getCurrentDate=()=>{const date=new Date();const day=String(date.getDate()).padStart(2,\"0\");const month=String(date.getMonth()+1).padStart(2,\"0\");const year=date.getFullYear();return`${day}/${month}/${year}`;};function App(){const[name,setName]=useState(\"\");const[myrole,setMyrole]=useState(\"\");const[writingTo,setWritingTo]=useState(\"\");const[recrole,setRecrole]=useState(\"\");const[prompt,setPrompt]=useState(\"\");const[letterType,setLetterType]=useState(\"\");const[letter,setLetter]=useState(\"\");const handleGenerateLetter=async()=>{if(prompt.trim()&&name.trim()&&myrole.trim()&&writingTo.trim()&&recrole.trim()&&letterType.trim()){const fullPrompt=`I am ${name}. I am a ${myrole}. I am writing to ${writingTo}, a ${recrole}. Write a concise letter. Letter type: ${letterType}. ${prompt}. Keep it factual. Do not ask for more information, as this is a one shot request, Fill in the date as ${getCurrentDate()}.`;const generatedLetter=await openaiservice.generateLetter(fullPrompt);const formattedLetter=generatedLetter.replace(/\\n/g,\"<br>\");setLetter(formattedLetter);}else{setLetter(\"Please enter all the details to generate the letter.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"wrapper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Letter Writer\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name-input\",className:\"name-input\",value:name,onChange:e=>setName(e.target.value),placeholder:\"Enter your name...\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"my-role-input\",className:\"my-role-input\",value:myrole,onChange:e=>setMyrole(e.target.value),placeholder:\"Enter your designation...\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"writing-to-input\",className:\"writing-to-input\",value:writingTo,onChange:e=>setWritingTo(e.target.value),placeholder:\"Enter the recipient's name...\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"designation-to-input\",className:\"designation-to-input\",value:recrole,onChange:e=>setRecrole(e.target.value),placeholder:\"Enter the recipient's designation...\"})]}),/*#__PURE__*/_jsxs(\"select\",{id:\"letter-type-select\",className:\"letter-type-select\",value:letterType,onChange:e=>setLetterType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",disabled:true,children:\"Select letter type...\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Formal\",children:\"Formal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Informal\",children:\"Informal\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Business\",children:\"Business\"})]}),/*#__PURE__*/_jsx(\"textarea\",{id:\"prompt-textarea\",className:\"prompt-textarea\",value:prompt,onChange:e=>setPrompt(e.target.value),placeholder:\"Enter the details for your letter...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"generate-button\",onClick:handleGenerateLetter,children:\"Generate Letter\"}),letter&&/*#__PURE__*/_jsxs(\"div\",{className:\"generated-letter\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Your Generated Letter:\"}),/*#__PURE__*/_jsx(\"p\",{dangerouslySetInnerHTML:{__html:letter}})]})]});}export default App;","map":{"version":3,"names":["React","useState","openaiservice","jsx","_jsx","jsxs","_jsxs","getCurrentDate","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","App","name","setName","myrole","setMyrole","writingTo","setWritingTo","recrole","setRecrole","prompt","setPrompt","letterType","setLetterType","letter","setLetter","handleGenerateLetter","trim","fullPrompt","generatedLetter","generateLetter","formattedLetter","replace","className","children","type","id","value","onChange","e","target","placeholder","disabled","onClick","dangerouslySetInnerHTML","__html"],"sources":["/home/runner/work/ai-letter-writer/ai-letter-writer/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport openaiservice from \"./services/openaiservice\";\nimport \"./App.css\";\n\nconst getCurrentDate = () => {\n  const date = new Date();\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const year = date.getFullYear();\n  return `${day}/${month}/${year}`;\n};\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [myrole, setMyrole] = useState(\"\");\n  const [writingTo, setWritingTo] = useState(\"\");\n  const [recrole, setRecrole] = useState(\"\");\n  const [prompt, setPrompt] = useState(\"\");\n  const [letterType, setLetterType] = useState(\"\");\n  const [letter, setLetter] = useState(\"\");\n\n  const handleGenerateLetter = async () => {\n    if (prompt.trim() && name.trim() && myrole.trim() && writingTo.trim() && recrole.trim() && letterType.trim()) {\n      const fullPrompt = `I am ${name}. I am a ${myrole}. I am writing to ${writingTo}, a ${recrole}. Write a concise letter. Letter type: ${letterType}. ${prompt}. Keep it factual. Do not ask for more information, as this is a one shot request, Fill in the date as ${getCurrentDate()}.`;\n      const generatedLetter = await openaiservice.generateLetter(fullPrompt);\n      const formattedLetter = generatedLetter.replace(/\\n/g, \"<br>\");\n      setLetter(formattedLetter);\n    } else {\n      setLetter(\"Please enter all the details to generate the letter.\");\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Letter Writer</h1>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          id=\"name-input\"\n          className=\"name-input\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Enter your name...\"\n        />\n        <input\n          type=\"text\"\n          id=\"my-role-input\"\n          className=\"my-role-input\"\n          value={myrole}\n          onChange={(e) => setMyrole(e.target.value)}\n          placeholder=\"Enter your designation...\"\n        />\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          id=\"writing-to-input\"\n          className=\"writing-to-input\"\n          value={writingTo}\n          onChange={(e) => setWritingTo(e.target.value)}\n          placeholder=\"Enter the recipient's name...\"\n        />\n        <input\n          type=\"text\"\n          id=\"designation-to-input\"\n          className=\"designation-to-input\"\n          value={recrole}\n          onChange={(e) => setRecrole(e.target.value)}\n          placeholder=\"Enter the recipient's designation...\"\n        />\n      </div>\n      <select\n        id=\"letter-type-select\"\n        className=\"letter-type-select\"\n        value={letterType}\n        onChange={(e) => setLetterType(e.target.value)}\n      >\n        <option value=\"\" disabled>\n          Select letter type...\n        </option>\n        <option value=\"Formal\">Formal</option>\n        <option value=\"Informal\">Informal</option>\n        <option value=\"Business\">Business</option>\n      </select>\n      <textarea\n        id=\"prompt-textarea\"\n        className=\"prompt-textarea\"\n        value={prompt}\n        onChange={(e) => setPrompt(e.target.value)}\n        placeholder=\"Enter the details for your letter...\"\n      ></textarea>\n      <button className=\"generate-button\" onClick={handleGenerateLetter}>\n        Generate Letter\n      </button>\n      {letter && (\n        <div className=\"generated-letter\">\n          <h2>Your Generated Letter:</h2>\n          <p dangerouslySetInnerHTML={{ __html: letter }}></p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}